workflow:
  id: brownfield-service
  name: 브라운필드 서비스/API 개선
  description: >-
    새로운 기능, 현대화 또는 성능 개선으로 기존 백엔드 서비스와 API를 개선하기 위한 에이전트 워크플로우.
    기존 시스템 분석과 안전한 통합을 처리합니다.
  type: brownfield
  project_types:
    - service-modernization
    - api-enhancement
    - microservice-extraction
    - performance-optimization
    - integration-enhancement

  sequence:
    - step: service_analysis
      agent: architect
      action: 기존 프로젝트 분석 및 document-project 작업 사용
      creates: document-project 템플릿에 따른 여러 문서
      notes: "기존 서비스 문서, 코드베이스, 성능 메트릭을 검토하고 통합 종속성을 식별합니다."

    - agent: pm
      creates: prd.md
      uses: brownfield-prd-tmpl
      requires: existing_service_analysis
      notes: "기존 시스템 분석을 포함한 서비스 개선에 중점을 둔 포괄적인 PRD 생성. 출력 저장: 최종 prd.md를 프로젝트의 docs/ 폴더에 복사."

    - agent: architect
      creates: architecture.md
      uses: brownfield-architecture-tmpl
      requires: prd.md
      notes: "서비스 통합 전략과 API 진화 계획이 포함된 아키텍처 생성. 출력 저장: 최종 architecture.md를 프로젝트의 docs/ 폴더에 복사."

    - agent: po
      validates: all_artifacts
      uses: po-master-checklist
      notes: "서비스 통합 안전성과 API 호환성을 위해 모든 문서 검증. 모든 문서에 대한 업데이트가 필요할 수 있음."

    - agent: various
      updates: any_flagged_documents
      condition: po_checklist_issues
      notes: "PO가 문제를 발견한 경우, 관련 에이전트로 돌아가 수정하고 업데이트된 문서를 docs/ 폴더로 다시 내보내기."

    - agent: po
      action: shard_documents
      creates: sharded_docs
      requires: all_artifacts_in_project
      notes: |
        IDE 개발을 위한 문서 샤딩:
        - 옵션 A: PO 에이전트를 사용하여 샤딩: @po 후 docs/prd.md 샤딩 요청
        - 옵션 B: 수동: shard-doc 작업 + docs/prd.md를 채팅으로 드래그
        - 샤딩된 콘텐츠가 있는 docs/prd/ 및 docs/architecture/ 폴더 생성

    - agent: sm
      action: create_story
      creates: story.md
      requires: sharded_docs
      repeats: for_each_epic
      notes: |
        스토리 생성 사이클:
        - SM 에이전트 (새 채팅): @sm → *create
        - 샤딩된 문서에서 다음 스토리 생성
        - 스토리는 "초안" 상태로 시작

    - agent: analyst/pm
      action: review_draft_story
      updates: story.md
      requires: story.md
      optional: true
      condition: user_wants_story_review
      notes: |
        선택사항: 초안 스토리 검토 및 승인
        - 참고: story-review 작업이 곧 제공됨
        - 스토리 완전성과 정렬 검토
        - 스토리 상태 업데이트: 초안 → 승인됨

    - agent: dev
      action: implement_story
      creates: implementation_files
      requires: story.md
      notes: |
        개발 에이전트 (새 채팅): @dev
        - 승인된 스토리 구현
        - 모든 변경사항으로 파일 목록 업데이트
        - 완료 시 스토리를 "검토"로 표시

    - agent: qa
      action: review_implementation
      updates: implementation_files
      requires: implementation_files
      optional: true
      notes: |
        선택사항: QA 에이전트 (새 채팅): @qa → review-story
        - 리팩토링 능력이 있는 시니어 개발자 검토
        - 작은 문제 직접 수정
        - 남은 항목에 대한 체크리스트 남김
        - 스토리 상태 업데이트 (검토 → 완료 또는 검토 유지)

    - agent: dev
      action: address_qa_feedback
      updates: implementation_files
      condition: qa_left_unchecked_items
      notes: |
        QA가 미확인 항목을 남긴 경우:
        - 개발 에이전트 (새 채팅): 남은 항목 처리
        - 최종 승인을 위해 QA로 복귀

    - repeat_development_cycle:
      action: continue_for_all_stories
      notes: |
        모든 에픽 스토리에 대해 스토리 사이클 반복 (SM → Dev → QA)
        PRD의 모든 스토리가 완료될 때까지 계속

    - agent: po
      action: epic_retrospective
      creates: epic-retrospective.md
      condition: epic_complete
      optional: true
      notes: |
        선택사항: 에픽 완료 후
        - 참고: epic-retrospective 작업이 곧 제공됨
        - 에픽이 올바르게 완료되었는지 검증
        - 학습 사항과 개선사항 문서화

    - workflow_end:
      action: project_complete
      notes: |
        모든 스토리가 구현되고 검토됨!
        프로젝트 개발 단계 완료.
        
        참조: .bmad-core/data/bmad-kb.md#IDE Development Workflow

  flow_diagram: |
    ```mermaid
    graph TD
        A[시작: 서비스 개선] --> B[analyst: 기존 서비스 분석]
        B --> C[pm: prd.md]
        C --> D[architect: architecture.md]
        D --> E[po: po-master-checklist로 검증]
        E --> F{PO 문제 발견?}
        F -->|예| G[수정을 위해 관련 에이전트로 복귀]
        F -->|아니오| H[po: 문서 샤딩]
        G --> E
        
        H --> I[sm: 스토리 생성]
        I --> J{초안 스토리 검토?}
        J -->|예| K[analyst/pm: 스토리 검토 및 승인]
        J -->|아니오| L[dev: 스토리 구현]
        K --> L
        L --> M{QA 검토?}
        M -->|예| N[qa: 구현 검토]
        M -->|아니오| O{더 많은 스토리?}
        N --> P{QA 문제 발견?}
        P -->|예| Q[dev: QA 피드백 처리]
        P -->|아니오| O
        Q --> N
        O -->|예| I
        O -->|아니오| R{에픽 회고?}
        R -->|예| S[po: 에픽 회고]
        R -->|아니오| T[프로젝트 완료]
        S --> T

        style T fill:#90EE90
        style H fill:#ADD8E6
        style I fill:#ADD8E6
        style L fill:#ADD8E6
        style C fill:#FFE4B5
        style D fill:#FFE4B5
        style K fill:#F0E68C
        style N fill:#F0E68C
        style S fill:#F0E68C
    ```

  decision_guidance:
    when_to_use:
      - 서비스 개선에 조정된 스토리가 필요
      - API 버전 관리 또는 호환성 중단 변경 필요
      - 데이터베이스 스키마 변경 필요
      - 성능 또는 확장성 개선 필요
      - 여러 통합 지점 영향

  handoff_prompts:
    analyst_to_pm: "서비스 분석 완료. 서비스 통합 전략이 포함된 포괄적인 PRD 생성."
    pm_to_architect: "PRD 준비 완료. docs/prd.md로 저장한 후 서비스 아키텍처를 생성하십시오."
    architect_to_po: "아키텍처 완료. docs/architecture.md로 저장하십시오. 서비스 통합 안전성을 위해 모든 아티팩트를 검증해 주십시오."
    po_issues: "PO가 [문서]에서 문제를 발견했습니다. [에이전트]로 돌아가 수정하고 업데이트된 문서를 다시 저장하십시오."
    complete: "모든 계획 아티팩트가 검증되고 docs/ 폴더에 저장되었습니다. 개발을 시작하기 위해 IDE 환경으로 이동하십시오."
