workflow:
  id: greenfield-service
  name: 그린필드 서비스/API 개발
  description: >-
    컨셉에서 개발까지 백엔드 서비스를 구축하기 위한 에이전트 워크플로우.
    복잡한 서비스를 위한 포괄적인 계획과 간단한 API를 위한 빠른 프로토타이핑을 모두 지원합니다.
  type: greenfield
  project_types:
    - rest-api
    - graphql-api
    - microservice
    - backend-service
    - api-prototype
    - simple-service

  sequence:
    - agent: analyst
      creates: project-brief.md
      optional_steps:
        - brainstorming_session
        - market_research_prompt
      notes: "브레인스토밍을 먼저 수행한 다음, 프로젝트 브리프를 생성하기 전에 선택적으로 심층 연구를 수행할 수 있습니다. 출력 저장: 최종 project-brief.md를 프로젝트의 docs/ 폴더에 복사."

    - agent: pm
      creates: prd.md
      requires: project-brief.md
      notes: "API/서비스 요구사항에 중점을 둔 prd-tmpl을 사용하여 프로젝트 브리프에서 PRD를 생성합니다. 출력 저장: 최종 prd.md를 프로젝트의 docs/ 폴더에 복사."

    - agent: architect
      creates: architecture.md
      requires: prd.md
      optional_steps:
        - technical_research_prompt
      notes: "architecture-tmpl을 사용하여 백엔드/서비스 아키텍처를 생성합니다. PRD 스토리에 대한 변경이나 새로운 스토리를 제안할 수 있습니다. 출력 저장: 최종 architecture.md를 프로젝트의 docs/ 폴더에 복사."

    - agent: pm
      updates: prd.md (필요한 경우)
      requires: architecture.md
      condition: architecture_suggests_prd_changes
      notes: "아키텍트가 스토리 변경을 제안한 경우, PRD를 업데이트하고 완전한 수정되지 않은 prd.md를 docs/ 폴더로 다시 내보냅니다."

    - agent: po
      validates: all_artifacts
      uses: po-master-checklist
      notes: "일관성과 완전성을 위해 모든 문서를 검증합니다. 모든 문서에 대한 업데이트가 필요할 수 있습니다."

    - agent: various
      updates: any_flagged_documents
      condition: po_checklist_issues
      notes: "PO가 문제를 발견한 경우, 관련 에이전트로 돌아가 수정하고 업데이트된 문서를 docs/ 폴더로 다시 내보냅니다."

    - agent: po
      action: shard_documents
      creates: sharded_docs
      requires: all_artifacts_in_project
      notes: |
        IDE 개발을 위한 문서 샤딩:
        - 옵션 A: PO 에이전트를 사용하여 샤딩: @po 후 docs/prd.md 샤딩 요청
        - 옵션 B: 수동: shard-doc 작업 + docs/prd.md를 채팅으로 드래그
        - 샤딩된 콘텐츠가 있는 docs/prd/ 및 docs/architecture/ 폴더 생성

    - agent: sm
      action: create_story
      creates: story.md
      requires: sharded_docs
      repeats: for_each_epic
      notes: |
        스토리 생성 사이클:
        - SM 에이전트 (새 채팅): @sm → *create
        - 샤딩된 문서에서 다음 스토리 생성
        - 스토리는 "초안" 상태로 시작

    - agent: analyst/pm
      action: review_draft_story
      updates: story.md
      requires: story.md
      optional: true
      condition: user_wants_story_review
      notes: |
        선택사항: 초안 스토리 검토 및 승인
        - 참고: story-review 작업이 곧 제공됨
        - 스토리 완전성과 정렬 검토
        - 스토리 상태 업데이트: 초안 → 승인됨

    - agent: dev
      action: implement_story
      creates: implementation_files
      requires: story.md
      notes: |
        개발 에이전트 (새 채팅): @dev
        - 승인된 스토리 구현
        - 모든 변경사항으로 파일 목록 업데이트
        - 완료 시 스토리를 "검토"로 표시

    - agent: qa
      action: review_implementation
      updates: implementation_files
      requires: implementation_files
      optional: true
      notes: |
        선택사항: QA 에이전트 (새 채팅): @qa → review-story
        - 리팩토링 능력이 있는 시니어 개발자 검토
        - 작은 문제 직접 수정
        - 남은 항목에 대한 체크리스트 남김
        - 스토리 상태 업데이트 (검토 → 완료 또는 검토 유지)

    - agent: dev
      action: address_qa_feedback
      updates: implementation_files
      condition: qa_left_unchecked_items
      notes: |
        QA가 미확인 항목을 남긴 경우:
        - 개발 에이전트 (새 채팅): 남은 항목 처리
        - 최종 승인을 위해 QA로 복귀

    - repeat_development_cycle:
      action: continue_for_all_stories
      notes: |
        모든 에픽 스토리에 대해 스토리 사이클 반복 (SM → Dev → QA)
        PRD의 모든 스토리가 완료될 때까지 계속

    - agent: po
      action: epic_retrospective
      creates: epic-retrospective.md
      condition: epic_complete
      optional: true
      notes: |
        선택사항: 에픽 완료 후
        - 참고: epic-retrospective 작업이 곧 제공됨
        - 에픽이 올바르게 완료되었는지 검증
        - 학습 사항과 개선사항 문서화

    - workflow_end:
      action: project_complete
      notes: |
        모든 스토리가 구현되고 검토됨!
        서비스 개발 단계 완료.
        
        참조: .bmad-core/data/bmad-kb.md#IDE Development Workflow

  flow_diagram: |
    ```mermaid
    graph TD
        A[시작: 서비스 개발] --> B[analyst: project-brief.md]
        B --> C[pm: prd.md]
        C --> D[architect: architecture.md]
        D --> E{아키텍처가 PRD 변경 제안?}
        E -->|예| F[pm: prd.md 업데이트]
        E -->|아니오| G[po: 모든 아티팩트 검증]
        F --> G
        G --> H{PO 문제 발견?}
        H -->|예| I[수정을 위해 관련 에이전트로 복귀]
        H -->|아니오| J[po: 문서 샤딩]
        I --> G
        
        J --> K[sm: 스토리 생성]
        K --> L{초안 스토리 검토?}
        L -->|예| M[analyst/pm: 스토리 검토 및 승인]
        L -->|아니오| N[dev: 스토리 구현]
        M --> N
        N --> O{QA 검토?}
        O -->|예| P[qa: 구현 검토]
        O -->|아니오| Q{더 많은 스토리?}
        P --> R{QA 문제 발견?}
        R -->|예| S[dev: QA 피드백 처리]
        R -->|아니오| Q
        S --> P
        Q -->|예| K
        Q -->|아니오| T{에픽 회고?}
        T -->|예| U[po: 에픽 회고]
        T -->|아니오| V[프로젝트 완료]
        U --> V

        B -.-> B1[선택사항: 브레인스토밍]
        B -.-> B2[선택사항: 시장 조사]
        D -.-> D1[선택사항: 기술 조사]

        style V fill:#90EE90
        style J fill:#ADD8E6
        style K fill:#ADD8E6
        style N fill:#ADD8E6
        style B fill:#FFE4B5
        style C fill:#FFE4B5
        style D fill:#FFE4B5
        style M fill:#F0E68C
        style P fill:#F0E68C
        style U fill:#F0E68C
    ```

  decision_guidance:
    when_to_use:
      - 프로덕션 API 또는 마이크로서비스 구축
      - 여러 엔드포인트와 복잡한 비즈니스 로직
      - 포괄적인 문서화와 테스트 필요
      - 여러 팀 구성원이 참여할 예정
      - 장기 유지보수 예상
      - 엔터프라이즈 또는 외부 대면 API

  handoff_prompts:
    analyst_to_pm: "프로젝트 브리프가 완료되었습니다. 프로젝트에 docs/project-brief.md로 저장한 다음 PRD를 생성하십시오."
    pm_to_architect: "PRD가 준비되었습니다. 프로젝트에 docs/prd.md로 저장한 다음 서비스 아키텍처를 생성하십시오."
    architect_review: "아키텍처 완료. docs/architecture.md로 저장하십시오. PRD 스토리에 대한 변경을 제안하거나 새로운 스토리를 추가해야 합니까?"
    architect_to_pm: "제안된 스토리 변경사항으로 PRD를 업데이트한 다음 완전한 prd.md를 docs/로 다시 내보내십시오."
    updated_to_po: "모든 문서가 docs/ 폴더에 준비되었습니다. 일관성을 위해 모든 아티팩트를 검증해 주십시오."
    po_issues: "PO가 [문서]에서 문제를 발견했습니다. [에이전트]로 돌아가 수정하고 업데이트된 문서를 다시 저장하십시오."
    complete: "모든 계획 아티팩트가 검증되고 docs/ 폴더에 저장되었습니다. 개발을 시작하기 위해 IDE 환경으로 이동하십시오."
