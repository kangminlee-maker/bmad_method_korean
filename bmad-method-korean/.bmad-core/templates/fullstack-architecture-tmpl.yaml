template:
  id: fullstack-architecture-template-v2
  name: 풀스택 아키텍처 문서
  version: 2.0
  output:
    format: markdown
    filename: docs/architecture.md
    title: "{{project_name}} 풀스택 아키텍처 문서"

workflow:
  mode: interactive
  elicitation: advanced-elicitation

sections:
  - id: introduction
    title: 소개
    instruction: |
      사용 가능한 경우, 시작하기 전에 모든 관련 컨텍스트를 수집하기 위해 제공된 관련 문서를 검토하세요. 최소한 docs/prd.md 및 docs/front-end-spec.md에 액세스할 수 있어야 합니다. 필요하지만 찾을 수 없는 문서는 사용자에게 요청하세요. 이 템플릿은 AI 기반 풀스택 개발을 안내하기 위해 백엔드와 프런트엔드 관심사를 모두 다루는 통합 아키텍처를 생성합니다.
    elicit: true
    content: |
      이 문서는 백엔드 시스템, 프런트엔드 구현 및 통합을 포함하여 {{project_name}}의 완전한 풀스택 아키텍처를 설명합니다. AI 기반 개발을 위한 단일 진실의 소스 역할을 하며 전체 기술 스택에서 일관성을 보장합니다.
      
      이 통합 접근 방식은 전통적으로 별도의 백엔드 및 프런트엔드 아키텍처 문서였던 것을 결합하여 이러한 관심사가 점점 더 얽혀 있는 현대 풀스택 애플리케이션의 개발 프로세스를 간소화합니다.
    sections:
      - id: starter-template
        title: 스타터 템플릿 또는 기존 프로젝트
        instruction: |
          아키텍처 설계를 진행하기 전에 프로젝트가 스타터 템플릿이나 기존 코드베이스를 기반으로 하는지 확인하세요:
          
          1. PRD 및 기타 문서에서 다음 언급 사항 검토:
          - 풀스택 스타터 템플릿 (예: T3 Stack, MEAN/MERN 스타터, Django + React 템플릿)
          - 모노레포 템플릿 (예: Nx, Turborepo 스타터)
          - 플랫폼별 스타터 (예: Vercel 템플릿, AWS Amplify 스타터)
          - 확장 또는 복제되는 기존 프로젝트
          
          2. 스타터 템플릿이나 기존 프로젝트가 언급된 경우:
          - 사용자에게 액세스 권한 요청 (링크, 리포지토리 또는 파일)
          - 사전 구성된 선택사항과 제약사항을 이해하기 위해 분석
          - 이미 내려진 아키텍처 결정 사항 확인
          - 수정 가능한 것과 유지해야 하는 것 식별
          
          3. 스타터가 언급되지 않았지만 그린필드인 경우:
          - 기술 선호도에 따라 적절한 풀스택 스타터 제안
          - 플랫폼별 옵션 고려 (Vercel, AWS 등)
          - 사용자가 사용 여부 결정하도록 허용
          
          4. 결정 사항과 부과하는 제약사항 문서화
          
          없는 경우 "N/A - 그린필드 프로젝트"라고 명시
      - id: changelog
        title: 변경 로그
        type: table
        columns: [날짜, 버전, 설명, 작성자]
        instruction: 문서 버전 및 변경사항 추적

  - id: high-level-architecture
    title: 상위 수준 아키텍처
    instruction: 이 섹션에는 기초를 설정하는 여러 하위 섹션이 포함됩니다. 모든 하위 섹션을 함께 제시한 다음 전체 섹션에 대한 피드백을 이끌어냅니다.
    elicit: true
    sections:
      - id: technical-summary
        title: 기술 요약
        instruction: |
          다음을 다루는 포괄적인 개요 제공 (4-6문장):
          - 전체 아키텍처 스타일 및 배포 접근 방식
          - 프런트엔드 프레임워크 및 백엔드 기술 선택
          - 프런트엔드와 백엔드 간의 주요 통합 지점
          - 인프라 플랫폼 및 서비스
          - 이 아키텍처가 PRD 목표를 달성하는 방법
      - id: platform-infrastructure
        title: 플랫폼 및 인프라 선택
        instruction: |
          PRD 요구사항과 기술적 가정을 기반으로 플랫폼 권장사항 제시:
          
          1. 일반적인 패턴 고려 (전체 목록이 아니며, 필요에 따라 최신 트렌드를 웹에서 검색):
          - **Vercel + Supabase**: Next.js를 사용한 빠른 개발, 내장 인증/스토리지
          - **AWS 풀스택**: Lambda, API Gateway, S3, Cognito를 사용한 엔터프라이즈 규모
          - **Azure**: .NET 생태계 또는 엔터프라이즈 Microsoft 환경용
          - **Google Cloud**: ML/AI 중심 애플리케이션 또는 Google 생태계 통합용
          
          2. 명확한 장단점과 함께 2-3개의 실행 가능한 옵션 제시
          3. 근거와 함께 권장사항 제시
          4. 명시적인 사용자 확인 받기
          
          선택사항과 사용될 주요 서비스 문서화.
        template: |
          **플랫폼:** {{selected_platform}}
          **주요 서비스:** {{core_services_list}}
          **배포 호스트 및 지역:** {{regions}}
      - id: repository-structure
        title: 리포지토리 구조
        instruction: |
          PRD 요구사항과 플랫폼 선택을 기반으로 리포지토리 접근 방식 정의, 확실하지 않은 경우 근거를 설명하거나 사용자에게 질문:
          
          1. 현대 풀스택 앱의 경우 모노레포가 종종 선호됨
          2. 도구 고려 (Nx, Turborepo, Lerna, npm workspaces)
          3. 패키지/앱 경계 정의
          4. 프런트엔드와 백엔드 간 공유 코드 계획
        template: |
          **구조:** {{repo_structure_choice}}
          **도구:** {{monorepo_tooling}}
          **패키지 조직:** {{package_boundaries}}
      - id: architecture-style
        title: 아키텍처 스타일
        instruction: 선택한 플랫폼과 요구사항에 적합한 아키텍처 스타일 정의
        template: |
          **백엔드:** {{backend_architecture_style}}
          **프런트엔드:** {{frontend_architecture_style}}
          **통합 패턴:** {{integration_patterns}}
      - id: architecture-diagram
        title: 아키텍처 다이어그램
        instruction: 높은 수준의 시스템 아키텍처를 보여주는 Mermaid 다이어그램 생성. 프런트엔드, 백엔드, 데이터베이스, 외부 서비스 및 주요 통합 지점을 포함.
        type: mermaid
        mermaid_type: architecture

  - id: tech-stack
    title: 기술 스택
    instruction: 통합 기술 스택을 백엔드와 프런트엔드 구성요소로 구성하여 정의
    elicit: true
    sections:
      - id: backend-stack
        title: 백엔드 기술 스택
        type: table
        columns: [카테고리, 기술, 버전, 목적, 근거]
        instruction: 백엔드별 기술 채우기
      - id: frontend-stack
        title: 프런트엔드 기술 스택
        type: table
        columns: [카테고리, 기술, 버전, 목적, 근거]
        instruction: 프런트엔드별 기술 채우기
      - id: shared-stack
        title: 공유/공통 기술
        type: table
        columns: [카테고리, 기술, 버전, 목적, 근거]
        instruction: 프런트엔드와 백엔드 모두에서 사용되는 기술 채우기

  - id: data-models
    title: 데이터 모델
    instruction: 핵심 데이터 모델과 이들 간의 관계 정의
    elicit: true
    sections:
      - id: core-entities
        title: 핵심 엔티티
        instruction: 주요 비즈니스 엔티티와 관계 정의. 백엔드 스키마와 프런트엔드 타입 모두에 대해 생각.
        repeatable: true
        sections:
          - id: entity
            title: "{{entity_name}}"
            template: |
              **목적:** {{entity_purpose}}
              **백엔드 표현:** {{backend_representation}}
              **프런트엔드 표현:** {{frontend_representation}}
              
              **주요 속성:**
              {{attributes_list}}
              
              **관계:**
              {{relationships_list}}
      - id: database-schema
        title: 데이터베이스 스키마
        instruction: 실제 데이터베이스 구현 세부사항
        template: |
          **데이터베이스 유형:** {{database_type}}
          **ORM/ODM:** {{orm_choice}}
          **마이그레이션 전략:** {{migration_strategy}}
      - id: frontend-state
        title: 프런트엔드 상태 관리
        instruction: 프런트엔드가 애플리케이션 상태를 관리하는 방법
        template: |
          **상태 관리 솔루션:** {{state_management}}
          **데이터 페칭 전략:** {{data_fetching}}
          **캐싱 접근 방식:** {{caching_strategy}}

  - id: api-design
    title: API 설계
    instruction: 프런트엔드와 백엔드 간의 API 계약 정의
    elicit: true
    sections:
      - id: api-architecture
        title: API 아키텍처
        template: |
          **API 스타일:** {{api_style}}
          **인증 방법:** {{auth_method}}
          **API 버전 관리:** {{versioning_strategy}}
          **문서 도구:** {{documentation_tools}}
      - id: endpoint-patterns
        title: 엔드포인트 패턴
        instruction: API 구성을 위한 표준 패턴 정의
        type: code
        language: plaintext
      - id: key-endpoints
        title: 주요 엔드포인트
        instruction: 핵심 기능을 위한 주요 API 엔드포인트 정의
        repeatable: true
        sections:
          - id: endpoint
            title: "{{endpoint_name}}"
            template: |
              - **메서드:** {{http_method}}
              - **경로:** {{endpoint_path}}
              - **목적:** {{endpoint_purpose}}
              - **인증:** {{auth_required}}
              - **요청 본문:** {{request_schema}}
              - **응답:** {{response_schema}}

  - id: frontend-architecture
    title: 프런트엔드 아키텍처
    instruction: 프런트엔드별 아키텍처 세부사항
    elicit: true
    sections:
      - id: component-structure
        title: 컴포넌트 구조
        instruction: 컴포넌트가 구성되고 구조화되는 방법 정의
        template: |
          **컴포넌트 라이브러리:** {{component_library}}
          **스타일링 접근 방식:** {{styling_approach}}
          **컴포넌트 패턴:** {{component_patterns}}
      - id: routing-structure
        title: 라우팅 구조
        instruction: 프런트엔드 라우팅 및 네비게이션 정의
        type: code
        language: plaintext
      - id: state-flow
        title: 상태 흐름
        instruction: 애플리케이션을 통해 데이터가 흐르는 방법
        type: mermaid
        mermaid_type: flowchart

  - id: backend-architecture
    title: 백엔드 아키텍처
    instruction: 백엔드별 아키텍처 세부사항
    elicit: true
    sections:
      - id: service-architecture
        title: 서비스 아키텍처
        template: |
          **서비스 패턴:** {{service_pattern}}
          **비즈니스 로직 조직:** {{business_logic_org}}
          **종속성 주입:** {{dependency_injection}}
      - id: middleware-stack
        title: 미들웨어 스택
        instruction: 요청 처리 파이프라인과 미들웨어 정의
        type: numbered-list
      - id: background-jobs
        title: 백그라운드 작업
        instruction: 비동기 처리 및 백그라운드 작업 정의
        template: |
          **큐 시스템:** {{queue_system}}
          **작업 처리:** {{job_processing}}
          **스케줄링:** {{scheduling_approach}}

  - id: security-architecture
    title: 보안 아키텍처
    instruction: 전체 스택에 걸친 보안 구현
    elicit: true
    sections:
      - id: authentication-flow
        title: 인증 흐름
        instruction: 완전한 인증 흐름과 구현 정의
        type: mermaid
        mermaid_type: sequence
      - id: authorization-model
        title: 권한 부여 모델
        template: |
          **역할 기반 액세스 제어:** {{rbac_implementation}}
          **권한 확인:** {{permission_checking}}
          **API 보안:** {{api_security}}
      - id: data-protection
        title: 데이터 보호
        template: |
          **전송 중 암호화:** {{encryption_in_transit}}
          **저장 시 암호화:** {{encryption_at_rest}}
          **민감한 데이터 처리:** {{sensitive_data_handling}}

  - id: infrastructure-deployment
    title: 인프라 및 배포
    instruction: 플랫폼별 배포 세부사항
    elicit: true
    sections:
      - id: deployment-architecture
        title: 배포 아키텍처
        template: |
          **배포 플랫폼:** {{deployment_platform}}
          **컨테이너화:** {{containerization}}
          **오케스트레이션:** {{orchestration}}
          **CI/CD 파이프라인:** {{cicd_pipeline}}
      - id: environments
        title: 환경
        type: table
        columns: [환경, 목적, 구성, URL]
        instruction: 개발, 스테이징, 프로덕션 환경 정의
      - id: monitoring-logging
        title: 모니터링 및 로깅
        template: |
          **애플리케이션 모니터링:** {{app_monitoring}}
          **로그 집계:** {{log_aggregation}}
          **오류 추적:** {{error_tracking}}
          **성능 모니터링:** {{performance_monitoring}}

  - id: development-standards
    title: 개발 표준
    instruction: 전체 스택에 걸친 코딩 표준 및 관행
    elicit: true
    sections:
      - id: code-organization
        title: 코드 구성
        template: |
          **백엔드 구조:** {{backend_structure}}
          **프런트엔드 구조:** {{frontend_structure}}
          **공유 코드:** {{shared_code_approach}}
      - id: naming-conventions
        title: 명명 규칙
        instruction: 전체 스택에 걸친 일관된 명명 정의
        type: bullet-list
      - id: testing-strategy
        title: 테스트 전략
        template: |
          **단위 테스트:** {{unit_testing}}
          **통합 테스트:** {{integration_testing}}
          **E2E 테스트:** {{e2e_testing}}
          **커버리지 목표:** {{coverage_targets}}

  - id: source-tree
    title: 소스 트리
    instruction: 완전한 프로젝트 구조를 선택한 리포지토리 접근 방식을 반영하여 정의
    elicit: true
    type: code
    language: plaintext

  - id: configuration-management
    title: 구성 관리
    instruction: 환경 변수와 구성이 전체 스택에서 관리되는 방법
    elicit: true
    sections:
      - id: environment-variables
        title: 환경 변수
        instruction: 백엔드와 프런트엔드 모두에 필요한 모든 환경 변수 나열
        type: table
        columns: [변수, 목적, 백엔드/프런트엔드, 예시 값]
      - id: configuration-files
        title: 구성 파일
        instruction: 필요한 구성 파일과 목적 나열
        type: bullet-list

  - id: developer-setup
    title: 개발자 설정
    instruction: 로컬 개발을 위한 완전한 설정 지침
    elicit: true
    sections:
      - id: prerequisites
        title: 전제 조건
        type: bullet-list
        instruction: 필요한 모든 도구와 버전 나열
      - id: setup-steps
        title: 설정 단계
        type: numbered-list
        instruction: 새 개발자가 시작하기 위한 단계별 지침
      - id: development-workflow
        title: 개발 워크플로우
        instruction: 로컬 개발, 테스트 및 디버깅을 위한 일반적인 명령

  - id: next-steps
    title: 다음 단계
    sections:
      - id: implementation-order
        title: 구현 순서
        instruction: 이 아키텍처 구현을 위한 권장 순서
        type: numbered-list
      - id: risk-mitigation
        title: 위험 완화
        instruction: 주요 기술적 위험과 완화 전략 식별
        type: bullet-list
