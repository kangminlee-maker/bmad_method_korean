template:
  id: brownfield-architecture-template-v2
  name: 브라운필드 개선 아키텍처
  version: 2.0
  output:
    format: markdown
    filename: docs/architecture.md
    title: "{{project_name}} 브라운필드 개선 아키텍처"

workflow:
  mode: interactive
  elicitation: advanced-elicitation

sections:
  - id: introduction
    title: 소개
    instruction: |
      중요 - 범위 및 평가 필요:
      
      이 아키텍처 문서는 포괄적인 아키텍처 계획이 필요한 기존 프로젝트에 대한 중요한 개선사항을 위한 것입니다. 진행하기 전에:
      
      1. **복잡성 확인**: 이 개선사항이 아키텍처 계획을 필요로 하는지 확인하세요. 간단한 추가사항의 경우, 다음을 권장합니다: "아키텍처 계획이 필요하지 않은 간단한 변경의 경우, 제품 소유자와 함께 brownfield-create-epic 또는 brownfield-create-story 작업을 사용하는 것을 고려하세요."
      
      2. **필수 입력**:
         - 완료된 brownfield-prd.md
         - 기존 프로젝트 기술 문서 (docs 폴더 또는 사용자 제공)
         - 기존 프로젝트 구조에 대한 접근 (IDE 또는 업로드된 파일)
      
      3. **심층 분석 의무**: 아키텍처 권장사항을 만들기 전에 기존 코드베이스, 아키텍처 패턴 및 기술적 제약사항에 대한 철저한 분석을 수행해야 합니다. 모든 제안은 가정이 아닌 실제 프로젝트 분석을 기반으로 해야 합니다.
      
      4. **지속적인 검증**: 이 프로세스 전반에 걸쳐 사용자와 명시적으로 이해를 검증하세요. 모든 아키텍처 결정에 대해 다음을 확인하세요: "기존 시스템 분석을 기반으로 [결정]을 권장합니다. 이유는 [실제 프로젝트의 증거]입니다. 이것이 시스템의 현실과 일치합니까?"
      
      필수 입력이 누락된 경우 진행하기 전에 요청하세요.
    elicit: true
    sections:
      - id: intro-content
        content: |
          이 문서는 {{project_name}}을 {{enhancement_description}}로 개선하기 위한 아키텍처 접근 방식을 설명합니다. 주요 목표는 기존 시스템과의 원활한 통합을 보장하면서 새로운 기능의 AI 기반 개발을 위한 지침 아키텍처 청사진 역할을 하는 것입니다.
          
          **기존 아키텍처와의 관계:**
          이 문서는 새로운 구성요소가 현재 시스템과 통합되는 방법을 정의하여 기존 프로젝트 아키텍처를 보완합니다. 새로운 패턴과 기존 패턴 간에 충돌이 발생하는 경우, 이 문서는 개선사항을 구현하면서 일관성을 유지하는 지침을 제공합니다.
      - id: existing-project-analysis
        title: 기존 프로젝트 분석
        instruction: |
          기존 프로젝트 구조와 아키텍처 분석:
          
          1. docs 폴더의 기존 문서 검토
          2. 현재 기술 스택 및 버전 검토
          3. 기존 아키텍처 패턴 및 규칙 식별
          4. 현재 배포 및 인프라 설정 확인
          5. 제약사항이나 제한사항 문서화
          
          중요: 분석 후 명시적으로 결과를 검증하세요: "프로젝트 분석을 기반으로 기존 시스템에 대해 다음을 식별했습니다: [주요 발견사항]. 아키텍처 권장사항을 진행하기 전에 이러한 관찰이 정확한지 확인해 주세요."
        elicit: true
        sections:
          - id: current-state
            title: 현재 프로젝트 상태
            template: |
              - **주요 목적:** {{existing_project_purpose}}
              - **현재 기술 스택:** {{existing_tech_summary}}
              - **아키텍처 스타일:** {{existing_architecture_style}}
              - **배포 방법:** {{existing_deployment_approach}}
          - id: available-docs
            title: 사용 가능한 문서
            type: bullet-list
            template: "- {{existing_docs_summary}}"
          - id: constraints
            title: 식별된 제약사항
            type: bullet-list
            template: "- {{constraint}}"
      - id: changelog
        title: 변경 로그
        type: table
        columns: [변경사항, 날짜, 버전, 설명, 작성자]
        instruction: 문서 버전 및 변경사항 추적

  - id: enhancement-scope
    title: 개선 범위 및 통합 전략
    instruction: |
      개선사항이 기존 시스템과 통합되는 방법 정의:
      
      1. 브라운필드 PRD 개선 범위 검토
      2. 기존 코드와의 통합 지점 식별
      3. 새로운 기능과 기존 기능 간의 경계 정의
      4. 호환성 요구사항 설정
      
      검증 체크포인트: 통합 전략을 제시하기 전에 다음을 확인하세요: "분석을 기반으로 제안하는 통합 접근 방식은 [특정 기존 시스템 특성]을 고려합니다. 이러한 통합 지점과 경계는 현재 아키텍처 패턴을 존중합니다. 이 평가가 정확합니까?"
    elicit: true
    sections:
      - id: enhancement-overview
        title: 개선 개요
        template: |
          **개선 유형:** {{enhancement_type}}
          **범위:** {{enhancement_scope}}
          **통합 영향:** {{integration_impact_level}}
      - id: integration-approach
        title: 통합 접근 방식
        template: |
          **코드 통합 전략:** {{code_integration_approach}}
          **데이터베이스 통합:** {{database_integration_approach}}
          **API 통합:** {{api_integration_approach}}
          **UI 통합:** {{ui_integration_approach}}
      - id: compatibility-requirements
        title: 호환성 요구사항
        template: |
          - **기존 API 호환성:** {{api_compatibility}}
          - **데이터베이스 스키마 호환성:** {{db_compatibility}}
          - **UI/UX 일관성:** {{ui_compatibility}}
          - **성능 영향:** {{performance_constraints}}

  - id: tech-stack-alignment
    title: 기술 스택 정렬
    instruction: |
      새로운 구성요소가 기존 기술 선택과 일치하도록 보장:
      
      1. 기존 기술 스택을 기반으로 사용
      2. 절대적으로 필요한 경우에만 새로운 기술 도입
      3. 명확한 근거로 새로운 추가사항 정당화
      4. 기존 종속성과의 버전 호환성 보장
    elicit: true
    sections:
      - id: existing-stack
        title: 기존 기술 스택
        type: table
        columns: [카테고리, 현재 기술, 버전, 개선에서의 사용, 참고사항]
        instruction: 유지하거나 통합해야 하는 현재 스택 문서화
      - id: new-tech-additions
        title: 새로운 기술 추가
        condition: 개선에 새로운 기술이 필요함
        type: table
        columns: [기술, 버전, 목적, 근거, 통합 방법]
        instruction: 개선에 새로운 기술이 필요한 경우에만 포함

  - id: data-models
    title: 데이터 모델 및 스키마 변경
    instruction: |
      새로운 데이터 모델과 기존 스키마와의 통합 방법 정의:
      
      1. 개선에 필요한 새로운 엔티티 식별
      2. 기존 데이터 모델과의 관계 정의
      3. 데이터베이스 스키마 변경 계획 (추가, 수정)
      4. 하위 호환성 보장
    elicit: true
    sections:
      - id: new-models
        title: 새로운 데이터 모델
        repeatable: true
        sections:
          - id: model
            title: "{{model_name}}"
            template: |
              **목적:** {{model_purpose}}
              **통합:** {{integration_with_existing}}
              
              **주요 속성:**
              - {{attribute_1}}: {{type_1}} - {{description_1}}
              - {{attribute_2}}: {{type_2}} - {{description_2}}
              
              **관계:**
              - **기존과의 관계:** {{existing_relationships}}
              - **새로운 관계:** {{new_relationships}}
      - id: schema-integration
        title: 스키마 통합 전략
        template: |
          **필요한 데이터베이스 변경:**
          - **새 테이블:** {{new_tables_list}}
          - **수정된 테이블:** {{modified_tables_list}}
          - **새 인덱스:** {{new_indexes_list}}
          - **마이그레이션 전략:** {{migration_approach}}
          
          **하위 호환성:**
          - {{compatibility_measure_1}}
          - {{compatibility_measure_2}}

  - id: component-architecture
    title: 컴포넌트 아키텍처
    instruction: |
      새로운 컴포넌트와 기존 아키텍처와의 통합 정의:
      
      1. 개선에 필요한 새로운 컴포넌트 식별
      2. 기존 컴포넌트와의 인터페이스 정의
      3. 명확한 경계와 책임 설정
      4. 통합 지점 및 데이터 흐름 계획
      
      필수 검증: 컴포넌트 아키텍처를 제시하기 전에 다음을 확인하세요: "제안하는 새로운 컴포넌트는 코드베이스에서 식별한 기존 아키텍처 패턴을 따릅니다: [특정 패턴]. 통합 인터페이스는 현재 컴포넌트 구조와 통신 패턴을 존중합니다. 이것이 프로젝트의 현실과 일치합니까?"
    elicit: true
    sections:
      - id: new-components
        title: 새로운 컴포넌트
        repeatable: true
        sections:
          - id: component
            title: "{{component_name}}"
            template: |
              **책임:** {{component_description}}
              **통합 지점:** {{integration_points}}
              
              **주요 인터페이스:**
              - {{interface_1}}
              - {{interface_2}}
              
              **종속성:**
              - **기존 컴포넌트:** {{existing_dependencies}}
              - **새로운 컴포넌트:** {{new_dependencies}}
              
              **기술 스택:** {{component_tech_details}}
      - id: interaction-diagram
        title: 컴포넌트 상호작용 다이어그램
        type: mermaid
        mermaid_type: graph
        instruction: 새로운 컴포넌트가 기존 컴포넌트와 상호작용하는 방법을 보여주는 Mermaid 다이어그램 생성

  - id: api-design
    title: API 설계 및 통합
    condition: 개선에 API 변경이 필요함
    instruction: |
      새로운 API 엔드포인트와 기존 API와의 통합 정의:
      
      1. 개선에 필요한 새로운 API 엔드포인트 계획
      2. 기존 API 패턴과의 일관성 보장
      3. 인증 및 권한 부여 통합 정의
      4. 필요한 경우 버전 관리 전략 계획
    elicit: true
    sections:
      - id: api-strategy
        title: API 통합 전략
        template: |
          **API 통합 전략:** {{api_integration_strategy}}
          **인증:** {{auth_integration}}
          **버전 관리:** {{versioning_approach}}
      - id: new-endpoints
        title: 새로운 API 엔드포인트
        repeatable: true
        sections:
          - id: endpoint
            title: "{{endpoint_name}}"
            template: |
              - **메서드:** {{http_method}}
              - **엔드포인트:** {{endpoint_path}}
              - **목적:** {{endpoint_purpose}}
              - **통합:** {{integration_with_existing}}
            sections:
              - id: request
                title: 요청
                type: code
                language: json
                template: "{{request_schema}}"
              - id: response
                title: 응답
                type: code
                language: json
                template: "{{response_schema}}"

  - id: external-api-integration
    title: 외부 API 통합
    condition: 개선에 새로운 외부 API가 필요함
    instruction: 개선에 필요한 새로운 외부 API 통합 문서화
    repeatable: true
    sections:
      - id: external-api
        title: "{{api_name}} API"
        template: |
          - **목적:** {{api_purpose}}
          - **문서:** {{api_docs_url}}
          - **기본 URL:** {{api_base_url}}
          - **인증:** {{auth_method}}
          - **통합 방법:** {{integration_approach}}
          
          **사용되는 주요 엔드포인트:**
          - `{{method}} {{endpoint_path}}` - {{endpoint_purpose}}
          
          **오류 처리:** {{error_handling_strategy}}

  - id: source-tree-integration
    title: 소스 트리 통합
    instruction: |
      새로운 코드가 기존 프로젝트 구조와 통합되는 방법 정의:
      
      1. 기존 프로젝트 구성 패턴 따르기
      2. 새 파일/폴더가 배치될 위치 식별
      3. 기존 명명 규칙과의 일관성 보장
      4. 기존 구조에 대한 최소한의 중단 계획
    elicit: true
    sections:
      - id: existing-structure
        title: 기존 프로젝트 구조
        type: code
        language: plaintext
        instruction: 현재 구조의 관련 부분 문서화
        template: "{{existing_structure_relevant_parts}}"
      - id: new-file-organization
        title: 새 파일 구성
        type: code
        language: plaintext
        instruction: 기존 구조에 대한 새로운 추가사항만 표시
        template: |
          {{project-root}}/
          ├── {{existing_structure_context}}
          │   ├── {{new_folder_1}}/           # {{purpose_1}}
          │   │   ├── {{new_file_1}}
          │   │   └── {{new_file_2}}
          │   ├── {{existing_folder}}/        # 추가사항이 있는 기존 폴더
          │   │   ├── {{existing_file}}       # 기존 파일
          │   │   └── {{new_file_3}}          # 새로운 추가
          │   └── {{new_folder_2}}/           # {{purpose_2}}
      - id: integration-guidelines
        title: 통합 지침
        template: |
          - **파일 명명:** {{file_naming_consistency}}
          - **폴더 구성:** {{folder_organization_approach}}
          - **Import/Export 패턴:** {{import_export_consistency}}

  - id: infrastructure-deployment
    title: 인프라 및 배포 통합
    instruction: |
      개선사항이 기존 인프라와 함께 배포되는 방법 정의:
      
      1. 기존 배포 파이프라인 및 인프라 사용
      2. 필요한 인프라 변경사항 식별
      3. 위험을 최소화하는 배포 전략 계획
      4. 롤백 절차 정의
    elicit: true
    sections:
      - id: existing-infrastructure
        title: 기존 인프라
        template: |
          **현재 배포:** {{existing_deployment_summary}}
          **인프라 도구:** {{existing_infrastructure_tools}}
          **환경:** {{existing_environments}}
      - id: enhancement-deployment
        title: 개선 배포 전략
        template: |
          **배포 접근 방식:** {{deployment_approach}}
          **인프라 변경:** {{infrastructure_changes}}
          **파이프라인 통합:** {{pipeline_integration}}
      - id: rollback-strategy
        title: 롤백 전략
        template: |
          **롤백 방법:** {{rollback_method}}
          **위험 완화:** {{risk_mitigation}}
          **모니터링:** {{monitoring_approach}}

  - id: coding-standards
    title: 코딩 표준 및 규칙
    instruction: |
      새 코드가 기존 프로젝트 규칙을 따르도록 보장:
      
      1. 프로젝트 분석에서 기존 코딩 표준 문서화
      2. 개선 관련 요구사항 식별
      3. 기존 코드베이스 패턴과의 일관성 보장
      4. 새 코드 구성을 위한 표준 정의
    elicit: true
    sections:
      - id: existing-standards
        title: 기존 표준 준수
        template: |
          **코드 스타일:** {{existing_code_style}}
          **린팅 규칙:** {{existing_linting}}
          **테스트 패턴:** {{existing_test_patterns}}
          **문서 스타일:** {{existing_doc_style}}
      - id: enhancement-standards
        title: 개선 관련 표준
        condition: 개선에 새로운 패턴이 필요함
        repeatable: true
        template: "- **{{standard_name}}:** {{standard_description}}"
      - id: integration-rules
        title: 중요한 통합 규칙
        template: |
          - **기존 API 호환성:** {{api_compatibility_rule}}
          - **데이터베이스 통합:** {{db_integration_rule}}
          - **오류 처리:** {{error_handling_integration}}
          - **로깅 일관성:** {{logging_consistency}}

  - id: testing-strategy
    title: 테스트 전략
    instruction: |
      개선을 위한 테스트 접근 방식 정의:
      
      1. 기존 테스트 스위트와 통합
      2. 기존 기능이 그대로 유지되도록 보장
      3. 새로운 기능 테스트 계획
      4. 통합 테스트 접근 방식 정의
    elicit: true
    sections:
      - id: existing-test-integration
        title: 기존 테스트와의 통합
        template: |
          **기존 테스트 프레임워크:** {{existing_test_framework}}
          **테스트 구성:** {{existing_test_organization}}
          **커버리지 요구사항:** {{existing_coverage_requirements}}
      - id: new-testing
        title: 새로운 테스트 요구사항
        sections:
          - id: unit-tests
            title: 새 컴포넌트를 위한 단위 테스트
            template: |
              - **프레임워크:** {{test_framework}}
              - **위치:** {{test_location}}
              - **커버리지 목표:** {{coverage_target}}
              - **기존과의 통합:** {{test_integration}}
          - id: integration-tests
            title: 통합 테스트
            template: |
              - **범위:** {{integration_test_scope}}
              - **기존 시스템 검증:** {{existing_system_verification}}
              - **새 기능 테스트:** {{new_feature_testing}}
          - id: regression-tests
            title: 회귀 테스트
            template: |
              - **기존 기능 검증:** {{regression_test_approach}}
              - **자동화된 회귀 스위트:** {{automated_regression}}
              - **수동 테스트 요구사항:** {{manual_testing_requirements}}

  - id: security-integration
    title: 보안 통합
    instruction: |
      기존 시스템과의 보안 일관성 보장:
      
      1. 기존 보안 패턴 및 도구 따르기
      2. 새로운 기능이 취약점을 도입하지 않도록 보장
      3. 기존 보안 태세 유지
      4. 새로운 컴포넌트에 대한 보안 테스트 정의
    elicit: true
    sections:
      - id: existing-security
        title: 기존 보안 조치
        template: |
          **인증:** {{existing_auth}}
          **권한 부여:** {{existing_authz}}
          **데이터 보호:** {{existing_data_protection}}
          **보안 도구:** {{existing_security_tools}}
      - id: enhancement-security
        title: 개선 보안 요구사항
        template: |
          **새로운 보안 조치:** {{new_security_measures}}
          **통합 지점:** {{security_integration_points}}
          **규정 준수 요구사항:** {{compliance_requirements}}
      - id: security-testing
        title: 보안 테스트
        template: |
          **기존 보안 테스트:** {{existing_security_tests}}
          **새로운 보안 테스트 요구사항:** {{new_security_tests}}
          **침투 테스트:** {{pentest_requirements}}

  - id: checklist-results
    title: 체크리스트 결과 보고서
    instruction: architect-checklist를 실행하고 브라운필드 관련 검증에 중점을 두어 결과를 여기에 채웁니다

  - id: next-steps
    title: 다음 단계
    instruction: |
      브라운필드 아키텍처 완료 후:
      
      1. 기존 시스템과의 통합 지점 검토
      2. Dev 에이전트와 함께 스토리 구현 시작
      3. 배포 파이프라인 통합 설정
      4. 롤백 및 모니터링 절차 계획
    sections:
      - id: story-manager-handoff
        title: 스토리 관리자 전달
        instruction: |
          이 브라운필드 개선사항으로 작업하기 위한 스토리 관리자를 위한 간단한 프롬프트 생성. 포함:
          - 이 아키텍처 문서 참조
          - 사용자와 검증된 주요 통합 요구사항
          - 실제 프로젝트 분석을 기반으로 한 기존 시스템 제약사항
          - 명확한 통합 체크포인트가 있는 첫 번째 구현 스토리
          - 구현 전반에 걸쳐 기존 시스템 무결성 유지 강조
      - id: developer-handoff
        title: 개발자 전달
        instruction: |
          구현을 시작하는 개발자를 위한 간단한 프롬프트 생성. 포함:
          - 실제 프로젝트에서 분석된 이 아키텍처 및 기존 코딩 표준 참조
          - 사용자와 검증된 기존 코드베이스와의 통합 요구사항
          - 실제 프로젝트 제약사항을 기반으로 한 주요 기술 결정
          - 특정 검증 단계가 있는 기존 시스템 호환성 요구사항
          - 기존 기능에 대한 위험을 최소화하기 위한 명확한 구현 순서
